{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<ul> <li>What is it?</li> <li>What are method chains?</li> <li>Why use Pandas Checks?</li> <li>Giving feedback and contributing</li> <li>Acknowledgments</li> <li>License</li> </ul>"},{"location":"#what-is-it","title":"What is it?","text":"<p>Pandas Checks is a Python package for data science and data engineering. It adds non-invasive health checks for Pandas method chains.  </p>"},{"location":"#what-are-method-chains","title":"What are method chains?","text":"<p>Method chains are one of the coolest features of the Pandas library! They allow you to write more functional code with fewer intermediate variables and fewer side effects. If you're familiar with R, method chains are Python's version of dplyr pipes.</p>"},{"location":"#why-use-pandas-checks","title":"Why use Pandas Checks?","text":"<p>Pandas Checks adds the ability to inspect and validate your Pandas data at any point in the method chain, without modifying the underlying data. Think of Pandas Checks as a drone you can send up to check on your pipeline, whether it's in exploratory data analysis, prototyping, or production.</p> <p>That way you don't need to chop up a method chain, or create intermediate variables, every time you need to diagnose, treat, or prevent problems with your data processing pipeline.</p> <p>As Fleetwood Mac says, you would never break the chain.</p> <p></p>"},{"location":"#giving-feedback-and-contributing","title":"Giving feedback and contributing","text":"<p>If you run into trouble or have questions, I'd love to know. Please open an issue.</p> <p>Contributions are appreciated! Please open an issue or submit a pull request. To run the tests, run <code>uv run --group dev nox</code></p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>Pandas Checks uses the following wonderful libraries:</p> <ul> <li>uv for package and dependency management</li> <li>nox for test automation</li> <li>mkdocs for...making docs!</li> <li>pre-commit hooks</li> <li>black for code formatting</li> </ul>"},{"location":"#license","title":"License","text":"<p>Pandas Checks is licensed under the BSD-3 License.</p> <p>\ud83d\udc3c\ud83e\ude7a</p>"},{"location":"usage/","title":"Usage","text":"<ul> <li>Installation</li> <li>Basic usage</li> <li>Methods available<ul> <li>Describe data</li> <li>Export interim files</li> <li>Time your code</li> <li>Turn Pandas Check on or off</li> <li>Validate data</li> <li>Visualize data</li> </ul> </li> <li>Customizing a check</li> <li>Configuring Pandas Check<ul> <li>Global configuration</li> <li>Local configuration</li> </ul> </li> </ul>"},{"location":"usage/#installation","title":"Installation","text":"<p>First make Pandas Check available in your environment.</p> <pre><code>pip install pandas-checks\n</code></pre> <p>Then import it in your code. It works in Jupyter notebooks, IPython, and Python scripts run from the command line.</p> <pre><code>import pandas_checks\n</code></pre> <p>After importing, you don't need to access the <code>pandas_checks</code> module directly.</p> <p>\ud83d\udca1 Tip: You can import Pandas Checks either before or after your code imports Pandas. Just somewhere. \ud83d\ude01</p>"},{"location":"usage/#basic-usage","title":"Basic usage","text":"<p>Pandas Checks adds <code>.check</code> methods to Pandas DataFrames and Series. </p> <p>Say you have a nice function.</p> <pre><code>def clean_iris_data(iris: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"Preprocess data about pretty flowers.\n\n    Args:\n        iris: The raw iris dataset.\n\n    Returns:\n        The cleaned iris dataset.\n    \"\"\"\n\n    return (\n        iris\n        .dropna()\n        .rename(columns={\"FLOWER_SPECIES\": \"species\"})\n        .query(\"species=='setosa'\")\n    )\n</code></pre> <p>But what if you want to make the chain more robust? Or see what's happening to the data as it flows down the pipeline? Or understand why your new <code>iris</code> CSV suddenly makes the cleaned data look weird? </p> <p>You can add some <code>.check</code> steps.</p> <pre><code>(\n    iris\n    .dropna()\n    .rename(columns={\"FLOWER_SPECIES\": \"species\"})\n\n    # Validate assumptions\n    .check.assert_positive(subset=[\"petal_length\", \"sepal_length\"])\n\n    # Plot the distribution of a column after cleaning\n    .check.hist(column='petal_length') \n\n    .query(\"species=='setosa'\")\n\n    # Display the first few rows after cleaning\n    .check.head(3)  \n)\n</code></pre> <p>The <code>.check</code> methods will display the following results:   The <code>.check</code> methods didn't modify how the <code>iris</code> data is processed by your code. They just let you check the data as it flows down the pipeline. That's the difference between Pandas <code>.head()</code> and Pandas Checks <code>.check.head()</code>.</p>"},{"location":"usage/#methods-available","title":"Methods available","text":"<p>Here's what's in the doctor's bag.</p>"},{"location":"usage/#describe-data","title":"Describe data","text":"<p>Standard Pandas methods:</p> <ul> <li><code>.check.columns()</code> - DataFrame</li> <li><code>.check.dtype()</code> - Series</li> <li><code>.check.dtypes()</code> - DataFrame</li> <li><code>.check.describe()</code> - DataFrame | Series</li> <li><code>.check.head()</code> - DataFrame | Series</li> <li><code>.check.info()</code> - DataFrame | Series</li> <li><code>.check.memory_usage()</code> - DataFrame | Series</li> <li><code>.check.nunique()</code> - DataFrame | Series</li> <li><code>.check.shape()</code> - DataFrame | Series</li> <li><code>.check.tail()</code> - DataFrame | Series</li> <li><code>.check.unique()</code> - DataFrame | Series</li> <li><code>.check.value_counts()</code> - DataFrame | Series</li> </ul> <p>New methods in Pandas Checks:</p> <ul> <li><code>.check.function()</code> - Apply an arbitrary lambda function to your data and see the result - DataFrame | Series</li> <li><code>.check.ncols()</code> - Count columns - DataFrame | Series</li> <li><code>.check.ndups()</code> - Count rows with duplicate values - DataFrame | Series</li> <li><code>.check.nnulls()</code> - Count rows with null values - DataFrame | Series</li> <li><code>.check.nrows()</code> - Count rows - DataFrame | Series</li> <li><code>.check.print()</code> - Print a string, a variable, or the current dataframe - DataFrame | Series</li> </ul>"},{"location":"usage/#export-interim-files","title":"Export interim files","text":"<ul> <li><code>.check.write()</code> - Export the current data, inferring file format from the name - DataFrame | Series</li> </ul>"},{"location":"usage/#time-your-code","title":"Time your code","text":"<ul> <li><code>.check.print_time_elapsed(start_time)</code> - Print the execution time since you called <code>start_time = pdc.start_timer()</code> - DataFrame | Series <p>\ud83d\udca1 Tip:  You can also use this stopwatch outside a method chain, anywhere in your Python code:  </p> </li> </ul> <pre><code>from pandas_checks import print_elapsed_time, start_timer\n\nstart_time = start_timer()\n...\nprint_elapsed_time(start_time)\n</code></pre>"},{"location":"usage/#turn-pandas-check-on-or-off","title":"Turn Pandas Check on or off","text":"<p>These methods can be used to disable subsequent Pandas Checks methods, either temporarily for a single method chain or permanently such as in a production environment.</p> <ul> <li><code>.check.disable_checks()</code> - Don't run checks. By default, still runs assertions. - DataFrame | Series</li> <li><code>.check.enable_checks()</code> - Run checks again. - DataFrame | Series</li> </ul>"},{"location":"usage/#validate-data","title":"Validate data","text":"<p>Custom:</p> <ul> <li><code>.check.assert_data()</code> - Check that data passes an arbitrary condition - DataFrame | Series</li> </ul> <p>Types:</p> <ul> <li><code>.check.assert_datetime()</code> - DataFrame | Series</li> <li><code>.check.assert_float()</code> - DataFrame | Series</li> <li><code>.check.assert_int()</code> - DataFrame | Series</li> <li><code>.check.assert_str()</code> - DataFrame | Series</li> <li><code>.check.assert_timedelta()</code> - DataFrame | Series</li> <li><code>.check.assert_type()</code> - DataFrame | Series</li> </ul> <p>Values:</p> <ul> <li><code>.check.assert_all_nulls()</code> - DataFrame | Series</li> <li><code>.check.assert_less_than()</code> - DataFrame | Series</li> <li><code>.check.assert_greater_than()</code> - DataFrame | Series</li> <li><code>.check.assert_negative()</code> - DataFrame | Series</li> <li><code>.check.assert_no_nulls()</code> - DataFrame | Series</li> <li><code>.check.assert_nrows()</code> - DataFrame | Series</li> <li><code>.check.assert_positive()</code> - DataFrame | Series</li> <li><code>.check.assert_same_nrows()</code> - Check that this DataFrame/Series has same number of rows as another DataFrame/Series, for example to validate 1:1 joins - DataFrame | Series</li> <li><code>.check.assert_unique()</code> - DataFrame | Series</li> </ul>"},{"location":"usage/#visualize-data","title":"Visualize data","text":"<ul> <li><code>.check.hist()</code> - A histogram - DataFrame | Series</li> <li><code>.check.plot()</code> - An arbitrary plot you can customize - DataFrame | Series</li> </ul>"},{"location":"usage/#customizing-a-check","title":"Customizing a check","text":"<p>You can use Pandas Checks methods like the regular Pandas methods. They accept the same arguments. For example, you can pass: * <code>.check.head(7)</code> * <code>.check.value_counts(column=\"species\", dropna=False, normalize=True)</code> * <code>.check.plot(kind=\"scatter\", x=\"sepal_width\", y=\"sepal_length\")</code></p> <p>Also, most Pandas Checks methods accept 3 additional arguments: 1. <code>check_name</code>: text to display before the result of the check 2. <code>fn</code>: a lambda function that modifies the data displayed by the check 3. <code>subset</code>: limit a check to certain columns</p> <pre><code>(\n    iris\n    .check.value_counts(column='species', check_name=\"Varieties after data cleaning\")\n    .assign(species=lambda df: df[\"species\"].str.upper()) # Do your regular Pandas data processing, like upper-casing the values in one column\n    .check.head(n=2, fn=lambda df: df[\"petal_width\"]*2) # Modify the data that gets displayed in the check only\n    .check.describe(subset=['sepal_width', 'sepal_length'])  # Only apply the check to certain columns\n)\n</code></pre> <p></p>"},{"location":"usage/#configuring-pandas-check","title":"Configuring Pandas Check","text":""},{"location":"usage/#global-configuration","title":"Global configuration","text":"<p>You can change how Pandas Checks works everywhere. For example:</p> <pre><code>import pandas_checks as pdc\n\n# Send Pandas Checks outputs to a log file and disable printing to screen\npdc.set_custom_print_fn(custom_print_fn=logging.info, print_to_stdout=False)\n\n# Set output precision and turn off the cute emojis\n# Run `pdc.describe_options()` to see the arguments you can pass to `.set_format()`.\npdc.set_format(precision=3, use_emojis=False)\n\n# Don't run any of the calls to Pandas Checks, globally. \npdc.disable_checks()\n</code></pre> <p>\ud83d\udca1 Tip: By default, <code>disable_checks()</code> and <code>enable_checks()</code> do not change whether Pandas Checks will run assertion methods (<code>.check.assert_*</code>). </p> <p>To turn off assertions too, add the argument <code>enable_asserts=False</code>, such as: <code>disable_checks(enable_asserts=False)</code>.</p>"},{"location":"usage/#local-configuration","title":"Local configuration","text":"<p>You can also adjust settings within a method chain by bookending the chain, like this:</p> <pre><code># Customize format during one method chain\n(\n    iris\n    .check.set_format(precision=7, use_emojis=False)\n    ... # Any .check methods in here will use the new format\n    .check.reset_format() # Restore default format\n)\n\n# Turn off Pandas Checks during one method chain\n(\n    iris\n    .check.disable_checks()\n    ... # Any .check methods in here will not be run\n    .check.enable_checks() # Turn it back on for the next code\n)\n</code></pre>"},{"location":"API%20reference/DataFrameChecks/","title":"DataFrame methods","text":""},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks._obj","title":"<code>_obj = pandas_obj</code>  <code>instance-attribute</code>","text":""},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.__init__","title":"<code>__init__(pandas_obj)</code>","text":""},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_all_nulls","title":"<code>assert_all_nulls(fail_message=' \u3128 Assert all nulls failed ', pass_message=' \u2714\ufe0f Assert all nulls passed ', subset=None, raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether Dataframe or subset of columns has all nulls. Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        iris\n        .check.assert_all_nulls(subset=[\"sepal_length\"])\n    )\n\n    # Will raise an exception \"\u3128 Assert all nulls failed\"\n\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert all nulls failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert all nulls passed '</code> <code>subset</code> <code>Union[str, List, None]</code> <p>Optional, which column or columns to check the condition against.</p> <code>None</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_data","title":"<code>assert_data(condition, fail_message=' \u3128 Assertion failed ', pass_message=' \u2714\ufe0f Assertion passed ', subset=None, raise_exception=True, exception_to_raise=DataError, message_shows_condition=True, verbose=False)</code>","text":"<p>Tests whether Dataframe meets condition. Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    # Validate that the Dataframe has at least 1 row\n\n    (\n        iris\n        .check.assert_data(lambda df: df.shape[0]&gt;0)\n\n        # Or customize the message displayed when assert fails\n        .check.assert_data(lambda df: df.shape[0]&gt;0, \"Assertion failed, DataFrame has no rows!\")\n\n        # Or show a warning instead of raising an exception\n        .check.assert_data(lambda df: s.shape[0]&gt;0, \"FYI DataFrame has no rows\", raise_exception=False)\n\n        # Or show a message if it passes, and raise a specific exception (ValueError) if it fails.\n        .check.assert_data(\n            lambda df: s.shape[0]&gt;0,\n            fail_message=\"FYI DataFrame has 0 rows\",\n            pass_message=\"DataFrame has at least 1 row!\",\n            exception_to_raise=ValueError,\n            verbose=True # To show pass_message when assertion passes\n            )\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>condition</code> <code>Callable</code> <p>Assertion criteria in the form of a lambda function, such as <code>lambda df: df.shape[0]&gt;10</code>.</p> required <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assertion failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assertion passed '</code> <code>subset</code> <code>Union[str, List, None]</code> <p>Optional, which column or columns to check the condition against. Applied after fn. Subsetting can also be done within the <code>condition</code>, such as <code>lambda df: df['column_name'].sum()&gt;10</code></p> <code>None</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>message_shows_condition</code> <code>bool</code> <p>Whether the fail/pass message should also print the assertion criteria</p> <code>True</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_datetime","title":"<code>assert_datetime(fail_message=None, pass_message=' \u2714\ufe0f Assert datetime passed ', subset=None, raise_exception=True, exception_to_raise=TypeError, verbose=False)</code>","text":"<p>Tests whether Dataframe or subset of columns is datetime or timestamp. Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        df\n        .check.assert_datetime(subset=\"datetime_col\")\n    )\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>subset</code> <code>Union[str, List, None]</code> <p>Optional, which column or columns to check the condition against.</p> <code>None</code> <code>fail_message</code> <code>Union[str, None]</code> <p>Message to display if the condition fails. If None, will report expected vs observed type.</p> <code>None</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert datetime passed '</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>TypeError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_float","title":"<code>assert_float(fail_message=None, pass_message=' \u2714\ufe0f Assert float passed ', subset=None, raise_exception=True, exception_to_raise=TypeError, verbose=False)</code>","text":"<p>Tests whether Dataframe or subset of columns is floats. Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        df\n        .check.assert_float(subset=\"float_col\")\n    )\n\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>Union[str, None]</code> <p>Message to display if the condition fails.</p> <code>None</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert float passed '</code> <code>subset</code> <code>Union[str, List, None]</code> <p>Optional, which column or columns to check the condition against.</p> <code>None</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>TypeError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_greater_than","title":"<code>assert_greater_than(min, fail_message=' \u3128 Assert minimum failed ', pass_message=' \u2714\ufe0f Assert minimum passed ', or_equal_to=False, subset=None, raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether all values in a Dataframe or subset of columns is &gt; or &gt;= a minimum threshold. Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        iris\n        # Validate that sepal_length is always greater than 0.1\n        .check.assert_greater_than(0.1, subset=\"sepal_length\")\n\n        # Validate that two columns are each always greater than or equal to 0.1\n        .check.assert_greater_than(0.1, subset=[\"sepal_length\", \"petal_length\"], or_equal_to=True)\n    )\n\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>min</code> <code>Any</code> <p>the minimum value to compare DataFrame to. Accepts any type that can be used in &gt;, such as int, float, str, datetime</p> required <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert minimum failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert minimum passed '</code> <code>or_equal_to</code> <code>bool</code> <p>whether to test for &gt;= min (True) or &gt; min (False)</p> <code>False</code> <code>subset</code> <code>Union[str, List, None]</code> <p>Optional, which column or columns to check the condition against.</p> <code>None</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_int","title":"<code>assert_int(fail_message=None, pass_message=' \u2714\ufe0f Assert integeer passed ', subset=None, raise_exception=True, exception_to_raise=TypeError, verbose=False)</code>","text":"<p>Tests whether Dataframe or subset of columns is integers. Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        df\n        .check.assert_int(subset=\"int_col\")\n    )\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>Union[str, None]</code> <p>Message to display if the condition fails.</p> <code>None</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert integeer passed '</code> <code>subset</code> <code>Union[str, List, None]</code> <p>Optional, which column or columns to check the condition against.</p> <code>None</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>TypeError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_less_than","title":"<code>assert_less_than(max, fail_message=' \u3128 Assert maximum failed ', pass_message=' \u2714\ufe0f Assert maximum passed ', or_equal_to=False, subset=None, raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether all values in a Dataframe or subset of columns is &lt; or &lt;= a maximum threshold. Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        iris\n\n        # Validate that sepal_length is always &lt; 1000\n        .check.assert_less_than(1000, subset=\"sepal_length\")\n\n        # Validate that two columns are each always less than or equal too 100\n        .check.assert_less_than(1000, subset=[\"sepal_length\", \"petal_length\"], or_equal_to=True)\n    )\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>max</code> <code>Any</code> <p>the max value to compare DataFrame to. Accepts any type that can be used in &lt;, such as int, float, str, datetime</p> required <code>or_equal_to</code> <code>bool</code> <p>whether to test for &lt;= max (True) or &lt; max (False)</p> <code>False</code> <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert maximum failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert maximum passed '</code> <code>subset</code> <code>Union[str, List, None]</code> <p>Optional, which column or columns to check the condition against.</p> <code>None</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_negative","title":"<code>assert_negative(fail_message=' \u3128 Assert negative failed ', pass_message=' \u2714\ufe0f Assert negative passed ', subset=None, assert_no_nulls=True, raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether Dataframe or subset of columns has all negative values. Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        df\n        .check.assert_negative(subset=\"column_name\")\n    )\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert negative failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert negative passed '</code> <code>subset</code> <code>Union[str, List, None]</code> <p>Optional, which column or columns to check the condition against.`</p> <code>None</code> <code>assert_no_nulls</code> <code>bool</code> <p>Whether to also enforce that data has no nulls.</p> <code>True</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_no_nulls","title":"<code>assert_no_nulls(fail_message=' \u3128 Assert no nulls failed ', pass_message=' \u2714\ufe0f Assert no nulls passed ', subset=None, raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether Dataframe or subset of columns has no nulls. Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        iris\n        .check.assert_no_nulls(subset=[\"sepal_length\"])\n    )\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert no nulls failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert no nulls passed '</code> <code>subset</code> <code>Union[str, List, None]</code> <p>Optional, which column or columns to check the condition against.</p> <code>None</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_nrows","title":"<code>assert_nrows(nrows, fail_message=' \u3128 Assert nrows failed ', pass_message=' \u2714\ufe0f Assert nrows passed ', raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether Dataframe has a given number of rows. Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        iris\n        .check.assert_nrows(20)\n    )\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>nrows</code> <code>int</code> <p>The expected number of rows</p> required <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert nrows failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert nrows passed '</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_positive","title":"<code>assert_positive(fail_message=' \u3128 Assert positive failed ', pass_message=' \u2714\ufe0f Assert positive passed ', subset=None, assert_no_nulls=True, raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether Dataframe or subset of columns has all positive values. Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        iris\n        .check.assert_positive(subset=[\"sepal_length\"])\n    )\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert positive failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert positive passed '</code> <code>subset</code> <code>Union[str, List, None]</code> <p>Optional, which column or columns to check the condition against.</p> <code>None</code> <code>assert_no_nulls</code> <code>bool</code> <p>Whether to also enforce that data has no nulls.</p> <code>True</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_same_nrows","title":"<code>assert_same_nrows(other, fail_message=' \u3128 Assert same_nrows failed ', pass_message=' \u2714\ufe0f Assert same_nrows passed ', raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether Dataframe has the same number of rows as another DataFrame/Series has.</p> <p>Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    # Validate that an expected one-to-one join didn't add rows due to duplicate keys in the right table.\n    (\n        transactions_df\n        .merge(how=\"left\", right=products_df, on=\"product_id\")\n        .check.assert_same_nrows(transactions_df, \"Left join changed row count! Check for duplicate `product_id` keys in product_df.\")\n    )\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Union[DataFrame, Series]</code> <p>The DataFrame or Series that we expect to have the same # of rows as</p> required <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert same_nrows failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert same_nrows passed '</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_str","title":"<code>assert_str(fail_message=None, pass_message=' \u2714\ufe0f Assert string passed ', subset=None, raise_exception=True, exception_to_raise=TypeError, verbose=False)</code>","text":"<p>Tests whether Dataframe or subset of columns is strings. Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        iris\n        .check.assert_str(subset=[\"species\", \"another_string_column\"])\n    )\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>Union[str, None]</code> <p>Message to display if the condition fails. If None, will report expected vs observed type.</p> <code>None</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert string passed '</code> <code>subset</code> <code>Union[str, List, None]</code> <p>Optional, which column or columns to check the condition against.</p> <code>None</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>TypeError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_timedelta","title":"<code>assert_timedelta(fail_message=None, pass_message=' \u2714\ufe0f Assert timedelta passed ', subset=None, raise_exception=True, exception_to_raise=TypeError, verbose=False)</code>","text":"<p>Tests whether Dataframe or subset of columns is of type timedelta. Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        df\n        .check.assert_timedelta(subset=[\"timedelta_col\"])\n    )\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>Union[str, None]</code> <p>Message to display if the condition fails. If None, will report expected vs observed type.</p> <code>None</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert timedelta passed '</code> <code>subset</code> <code>Union[str, List, None]</code> <p>Optional, which column or columns to check the condition against.</p> <code>None</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>TypeError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_type","title":"<code>assert_type(dtype, fail_message=None, pass_message=' \u2714\ufe0f Assert type passed ', subset=None, raise_exception=True, exception_to_raise=TypeError, verbose=False)</code>","text":"<p>Tests whether Dataframe or subset of columns meets type assumption. Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    # Validate that a column of mixed types has overall type `object`\n    (\n        iris\n        .check.assert_type(object, subset=\"column_with_mixed_types\")\n    )\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>dtype</code> <code>Type[Any]</code> <p>The required variable type</p> required <code>fail_message</code> <code>Union[str, None]</code> <p>Message to display if the condition fails. If None, will report expected vs observed type.</p> <code>None</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert type passed '</code> <code>subset</code> <code>Union[str, List, None]</code> <p>Optional, which column or columns to check the condition against.</p> <code>None</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>TypeError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.assert_unique","title":"<code>assert_unique(fail_message=' \u3128 Assert unique failed ', pass_message=' \u2714\ufe0f Assert unique passed ', subset=None, raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Validates that a subset of columns have no duplicate values, or validates that a DataFrame has no duplicate rows. Optionally raises an exception. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        df\n        # Validate that a column has no duplicate values\n        .check.assert_unique(subset=\"id_column\")\n\n        # Validate that a DataFrame has no duplicate rows\n        .check.assert_unique()\n    )\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert unique failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert unique passed '</code> <code>subset</code> <code>Union[str, List, None]</code> <p>Optional, which column or columns to check the condition against.</p> <code>None</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.columns","title":"<code>columns(fn=lambda df: df, subset=None, check_name='\ud83c\udfdb\ufe0f Columns')</code>","text":"<p>Prints the column names of a DataFrame, without modifying the DataFrame itself.</p> Example <pre><code>    (\n        df\n        .check.columns()\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before printing columns. Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string to select a subset of columns before printing their names. Applied after fn.</p> <code>None</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check to preface the result with.</p> <code>'\ud83c\udfdb\ufe0f Columns'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.describe","title":"<code>describe(fn=lambda df: df, subset=None, check_name='\ud83d\udccf Distributions', **kwargs)</code>","text":"<p>Displays descriptive statistics about a DataFrame without modifying the DataFrame itself.</p> <p>See Pandas docs for describe() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>    (\n        df\n        .check.describe()\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before running Pandas describe(). Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string to select a subset of columns before running Pandas describe(). Applied after fn.</p> <code>None</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check to preface the result with.</p> <code>'\ud83d\udccf Distributions'</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas describe() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.disable_checks","title":"<code>disable_checks(enable_asserts=True)</code>","text":"<p>Turns off Pandas Checks globally, such as in production mode. Calls to .check functions will not be run. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        iris\n        .check.disable_checks()\n        .check.assert_data(lambda df: df.shape[0]&gt;10) #  This check will NOT be run\n        .check.enable_checks() # Subsequent calls to .check will be run\n    )\n</code></pre> <p>Args     enable_assert: Optionally, whether to also enable or disable assert statements</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.dtypes","title":"<code>dtypes(fn=lambda df: df, subset=None, check_name='\ud83d\uddc2\ufe0f Data types')</code>","text":"<p>Displays the data types of a DataFrame's columns without modifying the DataFrame itself.</p> Example <pre><code>    (\n        iris\n        .check.dtypes()\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before running Pandas dtypes. Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string to select a subset of columns before running Pandas .dtypes. Applied after fn.</p> <code>None</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check to preface the result with.</p> <code>'\ud83d\uddc2\ufe0f Data types'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.enable_checks","title":"<code>enable_checks(enable_asserts=True)</code>","text":"<p>Globally enables Pandas Checks. Subequent calls to .check methods will be run. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        iris\n        [\"sepal_length\"]\n        .check.disable_checks()\n        .check.assert_data(lambda s: s.shape[0]&gt;10) #  This check will NOT be run\n        .check.enable_checks() # Subsequent calls to .check will be run\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>enable_asserts</code> <code>bool</code> <p>Optionally, whether to globally enable or disable calls to .check.assert_data().</p> <code>True</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.function","title":"<code>function(fn=lambda df: df, subset=None, check_name=None)</code>","text":"<p>Applies an arbitrary function on a DataFrame and shows the result, without modifying the DataFrame itself.</p> Example <pre><code>    (\n        iris\n        .check.function(fn=lambda df: df.shape[0]&gt;10, check_name='Has at least 10 rows?')\n    )\n    # Will return either 'True' or 'False'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>A lambda function to apply to the DataFrame. Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string to select a subset of columns before running Pandas describe(). Applied after fn.</p> <code>None</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check to preface the result with.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.get_mode","title":"<code>get_mode(check_name='\ud83d\udc3c\ud83e\ude7a Pandas Checks mode')</code>","text":"<p>Displays the current values of Pandas Checks global options enable_checks and enable_asserts. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        iris\n        .check.get_mode()\n    )\n\n    # The check will print:\n    # \"\ud83d\udc3c\ud83e\ude7a Pandas Checks mode: {'enable_checks': True, 'enable_asserts': True}\"\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check. Will be used as a preface the printed result.</p> <code>'\ud83d\udc3c\ud83e\ude7a Pandas Checks mode'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.head","title":"<code>head(n=5, fn=lambda df: df, subset=None, check_name=None)</code>","text":"<p>Displays the first n rows of a DataFrame, without modifying the DataFrame itself.</p> <p>See Pandas docs for head() for additional usage information.</p> Example <pre><code>    (\n        iris\n        .check.head(10)\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>The number of rows to display.</p> <code>5</code> <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before running Pandas head(). Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string to select a subset of columns before running Pandas head(). Applied after fn.</p> <code>None</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.hist","title":"<code>hist(fn=lambda df: df, subset=[], check_name=None, **kwargs)</code>","text":"<p>Displays a histogram for the DataFrame, without modifying the DataFrame itself.</p> <p>See Pandas docs for hist() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>    (\n        iris\n        .check.hist(subset=[\"sepal_length\", \"sepal_width\"])\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before running Pandas hist(). Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string to select a subset of columns before running Pandas hist(). Applied after fn.</p> <code>[]</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas hist() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p> Note <p>If more than one column is passed, displays a grid of histograms.</p> <p>Only renders in interactive mode (IPython/Jupyter), not in terminal.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.info","title":"<code>info(fn=lambda df: df, subset=None, check_name='\u2139\ufe0f Info', **kwargs)</code>","text":"<p>Displays summary information about a DataFrame, without modifying the DataFrame itself.</p> <p>See Pandas docs for info() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>    (\n        iris\n        .check.info()\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before running Pandas info(). Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string to select a subset of columns before running Pandas info(). Applied after fn.</p> <code>None</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>'\u2139\ufe0f Info'</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas info() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.memory_usage","title":"<code>memory_usage(fn=lambda df: df, subset=None, check_name='\ud83d\udcbe Memory usage', **kwargs)</code>","text":"<p>Displays the memory footprint of a DataFrame, without modifying the DataFrame itself.</p> <p>See Pandas docs for memory_usage() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>    (\n        iris\n        .check.memory_usage()\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before running Pandas memory_usage(). Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string to select a subset of columns before running Pandas memory_usage(). Applied after fn.</p> <code>None</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>'\ud83d\udcbe Memory usage'</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas info() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p> Note <p>Include argument <code>deep=True</code> to get further memory usage of object dtypes in the DataFrame. See Pandas docs for memory_usage() for more info.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.ncols","title":"<code>ncols(fn=lambda df: df, subset=None, check_name='\ud83c\udfdb\ufe0f Columns')</code>","text":"<p>Displays the number of columns in a DataFrame, without modifying the DataFrame itself.</p> Example <pre><code>    (\n        iris\n        .check.ncols()\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before counting the number of columns. Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string to select a subset of columns before counting the number of columns. Applied after fn.</p> <code>None</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>'\ud83c\udfdb\ufe0f Columns'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.ndups","title":"<code>ndups(fn=lambda df: df, subset=None, check_name=None, **kwargs)</code>","text":"<p>Displays the number of duplicated rows in a DataFrame, without modifying the DataFrame itself.</p> <p>See Pandas docs for duplicated() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>    # Count the number of rows with duplicate pairs of values across two columns:\n    (\n        iris\n        .check.ndups(subset=[\"sepal_length\", \"sepal_width\"])\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before counting the number of duplicates. Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string to select a subset of columns before counting duplicate rows. Applied after fn.</p> <code>None</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas duplicated() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.nnulls","title":"<code>nnulls(fn=lambda df: df, subset=None, by_column=True, check_name='\ud83d\udc7b Rows with NaNs')</code>","text":"<p>Displays the number of rows with null values in a DataFrame, without modifying the DataFrame itself.</p> <p>See Pandas docs for isna() for additional usage information.</p> Example <pre><code>    # Count the number of rows that have any nulls, one count per column\n    (\n        iris\n        .check.nnulls()\n    )\n\n    # Count the number of rows in the DataFrame that have a null in any column\n    (\n        iris\n        .check.nnulls(by_column=False)\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before counting the number of rows with a null. Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string to select a subset of columns before counting nulls.</p> <code>None</code> <code>by_column</code> <code>bool</code> <p>If True, count null values with each column separately. If False, count rows with a null value in any column. Applied after fn.</p> <code>True</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>'\ud83d\udc7b Rows with NaNs'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.nrows","title":"<code>nrows(fn=lambda df: df, subset=None, check_name='\u2630 Rows')</code>","text":"<p>Displays the number of rows in a DataFrame, without modifying the DataFrame itself.</p> Example <pre><code>    (\n        iris\n        .check.nrows()\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before counting the number of rows. Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string name of one column to limit which columns are considered when counting rows. Applied after fn.</p> <code>None</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>'\u2630 Rows'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.nunique","title":"<code>nunique(column, fn=lambda df: df, check_name=None, **kwargs)</code>","text":"<p>Displays the number of unique rows in a single column, without modifying the DataFrame itself.</p> <p>See Pandas docs for nunique() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>    (\n        iris\n        .check.nunique(column=\"sepal_width\")\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>str</code> <p>The name of a column to count uniques in. Applied after fn.</p> required <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before running Pandas nunique(). Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas nunique() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.plot","title":"<code>plot(fn=lambda df: df, subset=None, check_name='', **kwargs)</code>","text":"<p>Displays a plot of the DataFrame, without modifying the DataFrame itself.</p> <p>See Pandas docs for plot() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>    (\n        iris\n        .check.plot(kind=\"scatter\", x=\"sepal_width\", y=\"sepal_length\", title=\"Sepal width vs sepal length\")\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before running Pandas plot(). Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string name of one column to limit which columns are plotted. Applied after fn.</p> <code>None</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional title for the plot.</p> <code>''</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas plot() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p> Note <p>Plots are only displayed when code is run in IPython/Jupyter, not in terminal.</p> <p>If you pass a 'title' kwarg, it becomes the plot title, overriding check_name</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.print","title":"<code>print(object=None, fn=lambda df: df, subset=None, check_name=None, max_rows=10)</code>","text":"<p>Displays text, another object, or (by default) the current DataFrame's head. Does not modify the DataFrame itself.</p> Example <pre><code>    # Print messages and milestones\n    (\n        iris\n        .check.print(\"Starting data cleaning...\"\")\n        ...\n    )\n\n    # Inspect a DataFrame, such as the interim result of data processing\n    (\n        iris\n        ...\n        .check.print(fn=lambda df: df.query(\"sepal_width&lt;0\"), check_name=\"Rows with negative sepal_width\")\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>object</code> <code>Any</code> <p>Object to print. Can be anything printable: str, int, list, another DataFrame, etc. If None, print the DataFrame's head (with <code>max_rows</code> rows).</p> <code>None</code> <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before printing <code>object</code>. Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string name of one column to limit which columns are printed. Applied after fn.</p> <code>None</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <code>max_rows</code> <code>int</code> <p>Maximum number of rows to print if object=None.</p> <code>10</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.print_time_elapsed","title":"<code>print_time_elapsed(start_time, lead_in='Time elapsed', units='auto')</code>","text":"<p>Displays the time elapsed since start_time.</p> Example <pre><code>\n    import pandas_checks as pdc\n\n    start_time = pdc.start_timer()\n\n    (\n        iris\n        ... # Do some data processing\n        .check.print_time_elapsed(start_time, \"Cleaning took\")\n\n        ... # Do more\n        .check.print_time_elapsed(start_time, \"Processing total time\", units=\"seconds\") # Force units to stay in seconds\n\n    )\n\n    # Result: \"Cleaning took: 17.298324584960938 seconds\n    #         \"Processing total time: 71.0400543212890625 seconds\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>float</code> <p>The index time when the stopwatch started, which comes from the Pandas Checks start_timer()</p> required <code>lead_in</code> <code>Union[str, None]</code> <p>Optional text to print before the elapsed time.</p> <code>'Time elapsed'</code> <code>units</code> <code>str</code> <p>The units in which to display the elapsed time. Allowed values: \"auto\", \"milliseconds\", \"seconds\", \"minutes\", \"hours\" or shorthands \"ms\", \"s\", \"m\", \"h\".</p> <code>'auto'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>units</code> is not one of allowed values.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.reset_format","title":"<code>reset_format()</code>","text":"<p>Globally restores all Pandas Checks formatting options to their default \"factory\" settings. Does not modify the DataFrame itself.</p> Example <pre><code>    (\n        iris\n        .check.set_format(precision=9, use_emojis=False)\n\n        # Print DF summary stats with precision 9 digits and no Pandas Checks emojis\n        .check.describe()\n\n        .check.reset_format() # Go back to default precision and emojis \ud83e\udd73\n    )\n</code></pre> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.set_format","title":"<code>set_format(**kwargs)</code>","text":"<p>Configures selected formatting options for Pandas Checks. Does not modify the DataFrame itself.</p> <p>Run pandas_checks.describe_options() to see a list of available options.</p> Example <pre><code>    (\n        iris\n        .check.set_format(precision=9, use_emojis=False)\n\n        # Print DF summary stats with precision 9 digits and no Pandas Checks emojis\n        .check.describe()\n\n        .check.reset_format() # Go back to default precision and emojis \ud83e\udd73\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Pairs of setting name and its new value.</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.set_mode","title":"<code>set_mode(enable_checks, enable_asserts)</code>","text":"<p>Configures the operation mode for Pandas Checks globally. Does not modify the DataFrame itself.</p> Example <pre><code>\n    # Disable checks except keep running assertions. Same as using `.check.disable_checks()`:\n    (\n        iris\n        .check.set_mode(enable_checks=False)\n        .check.describe() # This check will not be run\n        .check.assert_data(lambda s: s.shape[0]&gt;10) #  This check will still be run\n    )\n\n    # Disable checks _and_ assertions\n    (\n        iris\n        .check.set_mode(enable_checks=False, enable_asserts=False)\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>enable_checks</code> <code>bool</code> <p>Whether to run any Pandas Checks methods globally. Does not affect .check.assert_*().</p> required <code>enable_asserts</code> <code>bool</code> <p>Whether to run calls to Pandas Checks .check.assert_*() statements globally.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.shape","title":"<code>shape(fn=lambda df: df, subset=None, check_name='\ud83d\udcd0 Shape')</code>","text":"<p>Displays the Dataframe's dimensions, without modifying the DataFrame itself.</p> Example <pre><code>    (\n        iris\n        .check.shape()\n        .check.shape(fn=lambda df: df.query(\"sepal_length&lt;5\"), check_name=\"Shape of DataFrame subgroup with sepal_length&lt;5\")\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before running Pandas <code>shape</code>. Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string name of one column to limit which columns are considered when printing the shape. Applied after fn.</p> <code>None</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>'\ud83d\udcd0 Shape'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p> Note <p>See also .check.nrows() and .check.ncols()</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.tail","title":"<code>tail(n=5, fn=lambda df: df, subset=None, check_name=None)</code>","text":"<p>Displays the last n rows of the DataFrame, without modifying the DataFrame itself.</p> <p>See Pandas docs for tail() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>    (\n        iris\n        .check.tail(10)\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Number of rows to show.</p> <code>5</code> <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before running Pandas tail(). Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string name of one column to limit which columns are displayed. Applied after fn.</p> <code>None</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.unique","title":"<code>unique(column, fn=lambda df: df, check_name=None)</code>","text":"<p>Displays the unique values in a column, without modifying the DataFrame itself.</p> <p>See Pandas docs for unique() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>    (\n        iris\n        .check.unique(\"species\")\n    )\n    # The check will print: \"\ud83c\udf1f Unique values of species: ['setosa', 'versicolor', 'virginica']\"\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>str</code> <p>Column to check for unique values.</p> required <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before calling Pandas unique(). Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p> Note <p><code>fn</code> is applied to the dataframe before selecting <code>column</code>. If you want to select the column before modifying it, set <code>column=None</code> and start <code>fn</code> with a column selection, i.e. <code>fn=lambda df: df[\"my_column\"].stuff()</code></p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.value_counts","title":"<code>value_counts(column, fn=lambda df: df, max_rows=10, check_name=None, **kwargs)</code>","text":"<p>Displays the value counts for a column, without modifying the DataFrame itself.</p> <p>See Pandas docs for value_counts() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>    (\n        iris\n        .check.value_counts(\"sepal_length\")\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>str</code> <p>Column to check for value counts.</p> required <code>max_rows</code> <code>int</code> <p>Maximum number of rows to show in the value counts.</p> <code>10</code> <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before running Pandas value_counts(). Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas value_counts() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p> Note <p><code>fn</code> is applied to the dataframe before selecting <code>column</code>. If you want to select the column before modifying it, set <code>column=None</code> and start <code>fn</code> with a column selection, i.e. <code>fn=lambda df: df[\"my_column\"].stuff()</code></p>"},{"location":"API%20reference/DataFrameChecks/#pandas_checks.DataFrameChecks.DataFrameChecks.write","title":"<code>write(path, format=None, fn=lambda df: df, subset=None, verbose=False, **kwargs)</code>","text":"<p>Exports DataFrame to file, without modifying the DataFrame itself.</p> <p>The file format is inferred from the extension. Supports:     - .csv     - .feather     - .parquet     - .pkl # Pickle     - .tsv # Tab-separated data file     - .xlsx</p> <p>This functions uses the corresponding Pandas export function, such as <code>to_csv()</code> and <code>to_feather()</code>. See Pandas docs for those corresponding export functions for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>    (\n        iris\n\n        # Process data\n        ...\n\n        # Export the interim data for inspection\n        .check.write(\"iris_interim.xlsx\")\n\n        # Continue processing\n        ...\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to write the file to.</p> required <code>format</code> <code>Union[str, None]</code> <p>Optional file format to force for the export. If None, format is inferred from the file's extension in <code>path</code>.</p> <code>None</code> <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the DataFrame before exporting. Example: <code>lambda df: df.shape[0]&gt;10</code>. Applied before subset.</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>An optional list of column names or a string name of one column to limit which columns are exported. Applied after fn.</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>Whether to print a message when the file is written.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional keyword arguments to pass to the Pandas export function (e.g. <code>.to_csv()</code>).</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p> Note <p>Exporting to some formats such as Excel, Feather, and Parquet may require you to install additional packages.</p>"},{"location":"API%20reference/SeriesChecks/","title":"Series methods","text":""},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks._obj","title":"<code>_obj = pandas_obj</code>  <code>instance-attribute</code>","text":""},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.__init__","title":"<code>__init__(pandas_obj)</code>","text":""},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_all_nulls","title":"<code>assert_all_nulls(fail_message=' \u3128 Assert all nulls failed ', pass_message=' \u2714\ufe0f Assert all nulls passed ', raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether Series has all nulls. Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n    .check.assert_all_nulls()\n)\n\n# Will raise an exception, \"\u3128 Assert all nulls failed\"\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert all nulls failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert all nulls passed '</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_data","title":"<code>assert_data(condition, fail_message=' \u3128 Assertion failed ', pass_message=' \u2714\ufe0f Assertion passed ', raise_exception=True, exception_to_raise=DataError, message_shows_condition=True, verbose=False)</code>","text":"<p>Tests whether Series meets condition. Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n\n    # Validate that a Series has at least 1 row:\n    .check.assert_data(lambda s: s.shape[0]&gt;0)\n\n    # Or customize the message displayed when assert fails\n    .check.assert_data(lambda df: s.shape[0]&gt;0, \"Assertion failed, Series has no rows!\")\n\n    # Or show a warning instead of raising an exception\n    .check.assert_data(lambda df: s.shape[0]&gt;0, \"FYI Series has no rows\", raise_exception=False)\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>condition</code> <code>Callable</code> <p>Assertion criteria in the form of a lambda function, such as <code>lambda s: s.shape[0]&gt;10</code>.</p> required <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assertion failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assertion passed '</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>message_shows_condition</code> <code>bool</code> <p>Whether the fail/pass message should also print the assertion criteria</p> <code>True</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_datetime","title":"<code>assert_datetime(fail_message=None, pass_message=' \u2714\ufe0f Assert datetime passed ', raise_exception=True, exception_to_raise=TypeError, verbose=False)</code>","text":"<p>Tests whether Series is datetime or timestamp. Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code>(\n    df\n    [\"datetime_col\"]\n    .check.assert_datetime()\n)\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>Union[str, None]</code> <p>Message to display if the condition fails. If None, will report expected vs observed type.</p> <code>None</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert datetime passed '</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>TypeError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_float","title":"<code>assert_float(fail_message=None, pass_message=' \u2714\ufe0f Assert float passed ', raise_exception=True, exception_to_raise=TypeError, verbose=False)</code>","text":"<p>Tests whether Series is floats. Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code>(\n    df\n    [\"float_col\"]\n    .check.assert_float()\n)\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>Union[str, None]</code> <p>Message to display if the condition fails. If None, will report expected vs observed type.</p> <code>None</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert float passed '</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>TypeError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_greater_than","title":"<code>assert_greater_than(min, fail_message=' \u3128 Assert minimum failed ', pass_message=' \u2714\ufe0f Assert minimum passed ', or_equal_to=False, raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether Series is &gt; or &gt;= a minimum threshold. Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n    # Validate that the Series is always &gt;= 0\n    .check.assert_greater_than(0, or_equal_to=True)\n)\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>min</code> <code>Any</code> <p>the minimum value to compare Series to. Accepts any type that can be used in &gt;, such as int, float, str, datetime</p> required <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert minimum failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert minimum passed '</code> <code>or_equal_to</code> <code>bool</code> <p>whether to test for &gt;= min (True) or &gt; min (False)</p> <code>False</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_int","title":"<code>assert_int(fail_message=None, pass_message=' \u2714\ufe0f Assert integeer passed ', raise_exception=True, exception_to_raise=TypeError, verbose=False)</code>","text":"<p>Tests whether Series is integers. Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code>(\n    df\n    [\"int_col\"]\n    .check.assert_int()\n)\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>Union[str, None]</code> <p>Message to display if the condition fails. If None, will report expected vs observed type.</p> <code>None</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert integeer passed '</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>TypeError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_less_than","title":"<code>assert_less_than(max, fail_message=' \u3128 Assert maximum failed ', pass_message=' \u2714\ufe0f Assert maximum passed ', or_equal_to=False, raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether all values in Series are &lt; or &lt;= a maximum threshold. Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n\n    # Validate that sepal_length is always &lt; 1000\n    .check.assert_less_than(1000)\n\n    # Validate that it's always &lt;= 1000\n    .check.assert_less_than(1000, or_equal_to=True)\n)\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>max</code> <code>Any</code> <p>the max value to compare Series to. Accepts any type that can be used in &lt;, such as int, float, str, datetime</p> required <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert maximum failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert maximum passed '</code> <code>or_equal_to</code> <code>bool</code> <p>whether to test for &lt;= max (True) or &lt; max (False)</p> <code>False</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_negative","title":"<code>assert_negative(fail_message=' \u3128 Assert negative failed ', pass_message=' \u2714\ufe0f Assert negative passed ', assert_no_nulls=True, raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether Series has all negative values. Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code>(\n    df\n    [\"column_name\"]\n    .check.assert_negative()\n)\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert negative failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert negative passed '</code> <code>assert_no_nulls</code> <code>bool</code> <p>Whether to also enforce that data has no nulls.</p> <code>True</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_no_nulls","title":"<code>assert_no_nulls(fail_message=' \u3128 Assert no nulls failed ', pass_message=' \u2714\ufe0f Assert no nulls passed ', raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether Series has no nulls. Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code>(\n    [\"sepal_length\"]\n    .check.assert_no_nulls()\n)\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert no nulls failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert no nulls passed '</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_nrows","title":"<code>assert_nrows(nrows, fail_message=' \u3128 Assert nrows failed ', pass_message=' \u2714\ufe0f Assert nrows passed ', raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether Series has a given number of rows. Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code>(\n    iris\n    [\"species\"]\n    .check.assert_nrows(20)\n)\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>nrows</code> <code>int</code> <p>The expected number of rows</p> required <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert nrows failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert nrows passed '</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_positive","title":"<code>assert_positive(fail_message=' \u3128 Assert positive failed ', pass_message=' \u2714\ufe0f Assert positive passed ', assert_no_nulls=True, raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether Series has all positive values. Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n    .check.assert_positive()\n)\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert positive failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert positive passed '</code> <code>assert_no_nulls</code> <code>bool</code> <p>Whether to also enforce that data has no nulls.</p> <code>True</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_same_nrows","title":"<code>assert_same_nrows(other, fail_message=' \u3128 Assert same_nrows failed ', pass_message=' \u2714\ufe0f Assert same_nrows passed ', raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Tests whether Series has the same number of rows as another DataFrame/Series has.</p> <p>Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code>(\n    df1\n    [\"column\"]\n    .check.assert_same_nrows(df2)\n)\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Union[DataFrame, Series]</code> <p>The DataFrame or Series that we expect to have the same # of rows as</p> required <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert same_nrows failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert same_nrows passed '</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The original DataFrame, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_str","title":"<code>assert_str(fail_message=None, pass_message=' \u2714\ufe0f Assert string passed ', raise_exception=True, exception_to_raise=TypeError, verbose=False)</code>","text":"<p>Tests whether Series is strings. Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code>(\n    iris\n    [\"species\"]\n    .check.assert_str()\n)\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>Union[str, None]</code> <p>Message to display if the condition fails. If None, will report expected vs observed type.</p> <code>None</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert string passed '</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>TypeError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_timedelta","title":"<code>assert_timedelta(fail_message=None, pass_message=' \u2714\ufe0f Assert timedelta passed ', raise_exception=True, exception_to_raise=TypeError, verbose=False)</code>","text":"<p>Tests whether Series is of type timedelta. Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code>(\n    df\n    .check.assert_timedelta(subset=[\"timedelta_col\"])\n)\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>Union[str, None]</code> <p>Message to display if the condition fails. If None, will report expected vs observed type.</p> <code>None</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert timedelta passed '</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>TypeError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_type","title":"<code>assert_type(dtype, fail_message=None, pass_message=' \u2714\ufe0f Assert type passed ', raise_exception=True, exception_to_raise=TypeError, verbose=False)</code>","text":"<p>Tests whether Series meets type assumption. Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code># Validate that a column of mixed types has overall type `object`:\n(\n    iris\n    [\"column_with_mixed_types\"]\n    .check.assert_type(object)\n)\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>dtype</code> <code>Type[Any]</code> <p>The required variable type</p> required <code>fail_message</code> <code>Union[str, None]</code> <p>Message to display if the condition fails. If None, will report expected vs observed type.</p> <code>None</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert type passed '</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>TypeError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.assert_unique","title":"<code>assert_unique(fail_message=' \u3128 Assert unique failed ', pass_message=' \u2714\ufe0f Assert unique passed ', raise_exception=True, exception_to_raise=DataError, verbose=False)</code>","text":"<p>Validates that a Series has no duplicate values. Optionally raises an exception. Does not modify the Series itself.</p> Example <pre><code>(\n    df\n    [\"id_column\"]\n    .check.assert_unique()\n)\n</code></pre> <p>See docs for <code>.check.assert_data()</code> for examples of how to customize assertions.</p> <p>Parameters:</p> Name Type Description Default <code>fail_message</code> <code>str</code> <p>Message to display if the condition fails.</p> <code>' \u3128 Assert unique failed '</code> <code>pass_message</code> <code>str</code> <p>Message to display if the condition passes.</p> <code>' \u2714\ufe0f Assert unique passed '</code> <code>raise_exception</code> <code>bool</code> <p>Whether to raise an exception if the condition fails.</p> <code>True</code> <code>exception_to_raise</code> <code>Type[BaseException]</code> <p>The exception to raise if the condition fails and raise_exception is True.</p> <code>DataError</code> <code>verbose</code> <code>bool</code> <p>Whether to display the pass message if the condition passes.</p> <code>False</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.describe","title":"<code>describe(fn=lambda s: s, check_name='\ud83d\udccf Distribution', **kwargs)</code>","text":"<p>Displays descriptive statistics about a Series, without modifying the Series itself.</p> <p>See Pandas docs for describe() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n    .check.describe()\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before running Pandas describe(). Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check to preface the result with.</p> <code>'\ud83d\udccf Distribution'</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas describe() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.disable_checks","title":"<code>disable_checks(enable_asserts=True)</code>","text":"<p>Turns off Pandas Checks globally, such as in production mode. Calls to .check functions will not be run. Does not modify the Series itself.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n    .check.disable_checks()\n    .check.assert_data(lambda s: s.shape[0]&gt;10) #  This check will NOT be run\n    .check.enable_checks() # Subsequent calls to .check will be run\n)\n</code></pre> <p>Args     enable_assert: Optionally, whether to also enable or disable assert statements</p> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.dtype","title":"<code>dtype(fn=lambda s: s, check_name='\ud83d\uddc2\ufe0f Data type')</code>","text":"<p>Displays the data type of a Series, without modifying the Series itself.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n    .check.dtype()\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before running Pandas dtype. Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check to preface the result with.</p> <code>'\ud83d\uddc2\ufe0f Data type'</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.enable_checks","title":"<code>enable_checks(enable_asserts=True)</code>","text":"<p>Globally enables Pandas Checks. Subequent calls to .check methods will be run. Does not modify the Series itself.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n    .check.disable_checks()\n    .check.assert_data(lambda s: s.shape[0]&gt;10) #  This check will NOT be run\n    .check.enable_checks() # Subsequent calls to .check will be run\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>enable_asserts</code> <code>bool</code> <p>Optionally, whether to globally enable or disable calls to .check.assert_data().</p> <code>True</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.function","title":"<code>function(fn=lambda s: s, check_name=None)</code>","text":"<p>Applies an arbitrary function on a Series and shows the result, without modifying the Series itself.</p> Example <pre><code>(\n    iris\n    .check.function(fn=lambda s: s.shape[0]&gt;10, check_name='Has at least 10 rows?')\n)\n# Will return \"True\"\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>The lambda function to apply to the Series. Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check to preface the result with.</p> <code>None</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.get_mode","title":"<code>get_mode(check_name='\u2699\ufe0f Pandas Checks mode')</code>","text":"<p>Displays the current values of Pandas Checks global options enable_checks and enable_asserts. Does not modify the Series itself.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n    .check.get_mode()\n)\n\n# The check will print: \"\ud83d\udc3c\ud83e\ude7a Pandas Checks mode: {'enable_checks': True, 'enable_asserts': True}\"\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check. Will be used as a preface the printed result.</p> <code>'\u2699\ufe0f Pandas Checks mode'</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.head","title":"<code>head(n=5, fn=lambda s: s, check_name=None)</code>","text":"<p>Displays the first n rows of a Series, without modifying the Series itself.</p> <p>See Pandas docs for head() for additional usage information.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n    .check.head(10)\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>The number of rows to display.</p> <code>5</code> <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before running Pandas head(). Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.hist","title":"<code>hist(fn=lambda s: s, check_name=None, **kwargs)</code>","text":"<p>Displays a histogram for the Series's distribution, without modifying the Series itself.</p> <p>See Pandas docs for hist() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n    .check.hist()\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before running Pandas head(). Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas hist() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p> Note <p>Plots are only displayed when code is run in IPython/Jupyter, not in terminal.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.info","title":"<code>info(fn=lambda s: s, check_name='\u2139\ufe0f Series info', **kwargs)</code>","text":"<p>Displays summary information about a Series, without modifying the Series itself.</p> <p>See Pandas docs for info() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n    .check.info()\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before running Pandas info(). Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>'\u2139\ufe0f Series info'</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas info() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.memory_usage","title":"<code>memory_usage(fn=lambda s: s, check_name='\ud83d\udcbe Memory usage', **kwargs)</code>","text":"<p>Displays the memory footprint of a Series, without modifying the Series itself.</p> <p>See Pandas docs for memory_usage() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n    .check.memory_usage()\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before running Pandas memory_usage(). Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>'\ud83d\udcbe Memory usage'</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas memory_usage() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p> Note <p>Include argument <code>deep=True</code> to get further memory usage of object dtypes. See Pandas docs for memory_usage() for more info.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.ndups","title":"<code>ndups(fn=lambda s: s, check_name=None, **kwargs)</code>","text":"<p>Displays the number of duplicated rows in the Series, without modifying the Series itself.</p> <p>See Pandas docs for duplicated() for additional usage information, including more configuration options (the <code>keep</code> argument) you can pass to this Pandas Checks method.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n    .check.ndups()\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before counting the number of duplicates. Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas duplicated() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.nnulls","title":"<code>nnulls(fn=lambda s: s, check_name='\ud83d\udc7b Rows with NaNs')</code>","text":"<p>Displays the number of rows with null values in the Series, without modifying the Series itself.</p> <p>See Pandas docs for isna() for additional usage information.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n    .check.nnulls()\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before counting rows with nulls. Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>'\ud83d\udc7b Rows with NaNs'</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.nrows","title":"<code>nrows(fn=lambda s: s, check_name='\u2630 Rows')</code>","text":"<p>Displays the number of rows in a Series, without modifying the Series itself.</p> Example <pre><code>(\n    iris\n    [\"sepal_width\"]\n    .check.nrows()\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before counting the number of rows. Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>'\u2630 Rows'</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.nunique","title":"<code>nunique(fn=lambda s: s, check_name=None, **kwargs)</code>","text":"<p>Displays the number of unique rows in a Series, without modifying the Series itself.</p> <p>See Pandas docs for nunique() for additional usage information, including more configuration options (the <code>dropna</code> argument) you can pass to this Pandas Checks method.</p> Example <pre><code>(\n    iris\n    [\"sepal_width\"]\n    .check.nunique()\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before running Pandas nunique(). Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas nunique() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.plot","title":"<code>plot(fn=lambda s: s, check_name='', **kwargs)</code>","text":"<p>Displays a plot of the Series, without modifying the Series itself.</p> <p>See Pandas docs for plot() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code># Visualize the distribution of a Series with a box plot:\n(\n    iris\n    [\"sepal_width\"]\n    .check.plot(kind=\"box\", title=\"Distribution of sepal width\")\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before running Pandas plot(). Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional title for the plot.</p> <code>''</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas plot() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p> Note <p>Plots are only displayed when code is run in IPython/Jupyter, not in terminal.</p> <p>If you pass a 'title' kwarg, it becomes the plot title, overriding check_name</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.print","title":"<code>print(object=None, fn=lambda s: s, check_name=None, max_rows=10)</code>","text":"<p>Displays text, another object, or (by default) the current DataFrame's head. Does not modify the Series itself.</p> Example <pre><code>(\n    iris\n    [\"sepal_width\"]\n\n    # Print messages such as milestones\n    .check.print(\"Starting data cleaning...\"\")\n    ...\n\n    # Inspect a Series, such as the interim result of data processing\n    .check.print(fn=lambda s: s[s&lt;0], check_name=\"Negative values of sepal_width\") # Will print those values if they exist\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>object</code> <code>Any</code> <p>Object to print. Can be anything printable: str, int, list, another DataFrame, etc. If None, print the Series's head (with <code>max_rows</code> rows).</p> <code>None</code> <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before printing <code>object</code>. Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <code>max_rows</code> <code>int</code> <p>Maximum number of rows to print if object=None.</p> <code>10</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.print_time_elapsed","title":"<code>print_time_elapsed(start_time, lead_in='Time elapsed', units='auto')</code>","text":"<p>Displays the time elapsed since start_time.</p> Example <pre><code>import pandas_checks as pdc\n\nstart_time = pdc.start_timer()\n\n(\n    iris\n    [\"species\"]\n    ... # Do some data processing\n    .check.print_time_elapsed(start_time, \"Cleaning took\")\n\n    ... # Do more\n    .check.print_time_elapsed(start_time, \"Processing total time\", units=\"seconds\") # Force units to stay in seconds\n\n)\n\n# Result: \"Cleaning took: 17.298324584960938 seconds\n#         \"Processing total time: 71.0400543212890625 seconds\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>float</code> <p>The index time when the stopwatch started, which comes from the Pandas Checks start_timer()</p> required <code>lead_in</code> <code>Union[str, None]</code> <p>Optional text to print before the elapsed time.</p> <code>'Time elapsed'</code> <code>units</code> <code>str</code> <p>The units in which to display the elapsed time. Allowed values: \"auto\", \"milliseconds\", \"seconds\", \"minutes\", \"hours\" or shorthands \"ms\", \"s\", \"m\", \"h\".</p> <code>'auto'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>units</code> is not one of allowed values.</p> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.reset_format","title":"<code>reset_format()</code>","text":"<p>Globally restores all Pandas Checks formatting options to their default \"factory\" settings. Does not modify the Series itself.</p> Example <pre><code>(\n    iris\n    [\"sepal_width\"]\n    .check.set_format(precision=9, use_emojis=False)\n\n    # Print Series summary stats with precision 9 digits and no Pandas Checks emojis\n    .check.describe()\n\n    .check.reset_format() # Go back to default precision and emojis \ud83e\udd73\n)\n</code></pre> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.set_format","title":"<code>set_format(**kwargs)</code>","text":"<p>Configures selected formatting options for Pandas Checks. Does not modify the Series itself.</p> <p>Run pandas_checks.describe_options() to see a list of available options.</p> <p>See .check.reset_format() to restore defaults.</p> Example <pre><code>(\n    iris\n    [\"sepal_width\"]\n    .check.set_format(precision=9, use_emojis=False)\n\n    # Print Series summary stats with precision 9 digits and no Pandas Checks emojis\n    .check.describe()\n\n    .check.reset_format() # Go back to default precision and emojis \ud83e\udd73\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Pairs of setting name and its new value.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.set_mode","title":"<code>set_mode(enable_checks, enable_asserts)</code>","text":"<p>Configures the operation mode for Pandas Checks globally. Does not modify the Series itself.</p> Example <pre><code>(\n    iris\n    [\"sepal_width\"]\n\n    # Disable checks except keep running assertions. Same as using `.check.disable_checks()`:\n    .check.set_mode(enable_checks=False)\n    .check.describe() # This check will not be run\n    .check.assert_data(lambda s: s.shape[0]&gt;10) #  This check will still be run\n\n    # Disable checks _and_ assertions\n    .check.set_mode(enable_checks=False, enable_asserts=False)\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>enable_checks</code> <code>bool</code> <p>Whether to run any Pandas Checks methods globally. Does not affect .check.assert_*() calls.</p> required <code>enable_asserts</code> <code>bool</code> <p>Whether to run calls to Pandas Checks .check.assert_*() globally.</p> required <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.shape","title":"<code>shape(fn=lambda s: s, check_name='\ud83d\udcd0 Shape')</code>","text":"<p>Displays the Series's dimensions, without modifying the Series itself.</p> Example <pre><code>(\n    iris\n    [\"sepal_width\"]\n    .check.shape()\n    .check.shape(fn=lambda s: s[s&lt;5]), check_name=\"Shape of sepal_width series with values &lt;5\")\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before running Pandas <code>shape</code>. Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>'\ud83d\udcd0 Shape'</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p> Note <p>See also .check.nrows()</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.tail","title":"<code>tail(n=5, fn=lambda s: s, check_name=None)</code>","text":"<p>Displays the last n rows of the Series, without modifying the Series itself.</p> <p>See Pandas docs for tail() for additional usage information.</p> Example <pre><code>(\n    iris\n    .check.tail(10)\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Number of rows to show.</p> <code>5</code> <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before running Pandas tail(). Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.unique","title":"<code>unique(fn=lambda s: s, check_name=None)</code>","text":"<p>Displays the unique values in a Series, without modifying the Series itself.</p> <p>See Pandas docs for unique() for additional usage information.</p> Example <pre><code>(\n    iris\n    [\"species\"]\n    .check.unique()\n)\n# The check will print: \"\ud83c\udf1f Unique values of species: ['setosa', 'versicolor', 'virginica']\"\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before running Pandas unique(). Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.value_counts","title":"<code>value_counts(fn=lambda s: s, max_rows=10, check_name=None, **kwargs)</code>","text":"<p>Displays the value counts for a Series, without modifying the Series itself.</p> <p>See Pandas docs for value_counts() for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n    .check.value_counts()\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>max_rows</code> <code>int</code> <p>Maximum number of rows to show in the value counts.</p> <code>10</code> <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before running Pandas value_counts(). Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>check_name</code> <code>Union[str, None]</code> <p>An optional name for the check, to be printed as preface to the result.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional arguments that are accepted by Pandas value_counts() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/SeriesChecks/#pandas_checks.SeriesChecks.SeriesChecks.write","title":"<code>write(path, format=None, fn=lambda s: s, verbose=False, **kwargs)</code>","text":"<p>Exports Series to file, without modifying the Series itself.</p> <p>The file format is inferred from the extension. Supports:     - .csv     - .feather     - .parquet     - .pkl # Pickle     - .tsv # Tab-separated data file     - .xlsx</p> <p>This functions uses the corresponding Pandas export function such as to_csv() and to_feather(). See Pandas docs for those corresponding export functions for additional usage information, including more configuration options you can pass to this Pandas Checks method.</p> Note <p>Exporting to some formats such as Excel, Feather, and Parquet may require you to install additional packages.</p> Example <pre><code>(\n    iris\n    [\"sepal_length\"]\n\n    # Process data\n    ...\n\n    # Export the interim data for inspection\n    .check.write(\"sepal_length_interim.xlsx\")\n\n    # Continue processing\n    ...\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to write the file to.</p> required <code>format</code> <code>Union[str, None]</code> <p>Optional file format to force for the export. If None, format is inferred from the file's extension in <code>path</code>.</p> <code>None</code> <code>fn</code> <code>Callable</code> <p>An optional lambda function to apply to the Series before exporting. Example: <code>lambda s: s.dropna()</code>.</p> <code>lambda s: s</code> <code>verbose</code> <code>bool</code> <p>Whether to print a message when the file is written.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Optional, additional keyword arguments to pass to the Pandas export function (e.g. <code>.to_csv()</code>).</p> <code>{}</code> <p>Returns:</p> Type Description <code>Series</code> <p>The original Series, unchanged.</p>"},{"location":"API%20reference/display/","title":"Display","text":"<p>Utilities for displaying text, tables, and plots in Pandas Checks in both terminal and IPython/Jupyter environments.</p>"},{"location":"API%20reference/display/#pandas_checks.display._display_check","title":"<code>_display_check(data, name=None)</code>","text":"<p>Renders the result of a Pandas Checks method.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>The data to display, whether a DataFrame, Series, string, or other printable.</p> required <code>name</code> <code>Union[str, None]</code> <p>The optional name of the check.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/display/#pandas_checks.display._display_line","title":"<code>_display_line(line, lead_in=None, colors={})</code>","text":"<p>Displays a line of text with optional formatting.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>str</code> <p>The text to display.</p> required <code>lead_in</code> <code>Union[str, None]</code> <p>The optional text to display before the main text.</p> <code>None</code> <code>colors</code> <code>Dict</code> <p>An optional dictionary containing color options for the text and lead-in text. See syntax in docstring for _render_text().</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/display/#pandas_checks.display._display_plot","title":"<code>_display_plot()</code>","text":"<p>Renders the active Pandas Checks matplotlib plot object in an IPython/Jupyter environment with an optional indent.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Note <p>It assumes the plot has already been drawn by another function, such as with .plot() or .hist().</p>"},{"location":"API%20reference/display/#pandas_checks.display._display_plot_title","title":"<code>_display_plot_title(line, lead_in=None, colors={})</code>","text":"<p>Displays a plot title with optional formatting.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>str</code> <p>The title text to display.</p> required <code>lead_in</code> <code>Union[str, None]</code> <p>Optional text to display before the title.</p> <code>None</code> <code>colors</code> <code>Dict</code> <p>An optional dictionary containing color settings for the text and lead-in text. See details in docstring for _render_text().</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/display/#pandas_checks.display._display_router","title":"<code>_display_router(data, data_for_print_fn=None, bypass_print_fn=False)</code>","text":"<p>Renders content to the output destination(s) as configured globally, including rich content such as plots in IPython/Jupyter environments.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>A displayable object, such as a string, DataFrame, Series, or plot.</p> required <code>data_for_print_fn</code> <code>Union[str, None]</code> <p>Optional, simplied version of text to display when data is formatted HTML (so it doesn't look odd when print_fn is logging.info, for example).</p> <code>None</code> <code>bypass_print_fn</code> <code>bool</code> <p>Optional flag to disable printing to custom_print_fn. Used when we want to display data (such as a plot title) in IPython/Jupyter but not in a logger or other custom_print_fn (since plots aren't logged).</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/display/#pandas_checks.display._display_table","title":"<code>_display_table(table, title)</code>","text":"<p>Renders a Pandas DataFrame or Series in an IPython/Jupyter environment with an optional indent.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Union[DataFrame, Series]</code> <p>The DataFrame or Series to display.</p> required <code>title</code> <code>Union[str, None]</code> <p>Optional title for the table.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/display/#pandas_checks.display._display_table_title","title":"<code>_display_table_title(line, lead_in=None, colors={})</code>","text":"<p>Displays a table title with optional formatting.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>str</code> <p>The title text to display.</p> required <code>lead_in</code> <code>Union[str, None]</code> <p>Optional text to display before the title.</p> <code>None</code> <code>colors</code> <code>Dict</code> <p>An optiona dictionary containing color options for the text and lead-in text. See details in docstring for _render_text()</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/display/#pandas_checks.display._filter_emojis","title":"<code>_filter_emojis(text)</code>","text":"<p>Removes emojis from text if user has globally forbidden them.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to filter emojis from.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The text with emojis removed if the user's global settings do not allow emojis. Else, the original text.</p>"},{"location":"API%20reference/display/#pandas_checks.display._format_background_color","title":"<code>_format_background_color(color)</code>","text":"<p>Applies a background color to text used being displayed in the terminal.</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>str</code> <p>The background color to format. See syntax in docstring for _render_text().</p> required <p>Returns:</p> Type Description <code>str</code> <p>The formatted background color.</p>"},{"location":"API%20reference/display/#pandas_checks.display._lead_in","title":"<code>_lead_in(lead_in, foreground, background)</code>","text":"<p>Formats a lead-in text with colors.</p> <p>Parameters:</p> Name Type Description Default <code>lead_in</code> <code>Union[str, None]</code> <p>The lead-in text to format.</p> required <code>foreground</code> <code>str</code> <p>The foreground color for the lead-in text. See syntax in docstring for _render_text().</p> required <code>background</code> <code>str</code> <p>The background color for the lead-in text. See syntax in docstring for _render_text().</p> required <p>Returns:</p> Type Description <code>str</code> <p>The formatted lead-in text.</p>"},{"location":"API%20reference/display/#pandas_checks.display._print_router","title":"<code>_print_router(text, custom_print_fn_only=False, text_for_print_fn=None, bypass_print_fn=False)</code>","text":"<p>Prints given text to the output destination(s) as configured globally.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>Union[str, None]</code> <p>The text to print.</p> required <code>custom_print_fn_only</code> <code>bool</code> <p>Whether to only call the custom print function if it exists, without attempting to print to standard output. Used when _print_router() is called only to access custom_print_fn.</p> <code>False</code> <code>text_for_print_fn</code> <code>Union[str, None]</code> <p>Optional, simplied version of text to display without colors (so it doesn't look odd when print_fn is logging.info, for example).</p> <code>None</code> <code>bypass_print_fn</code> <code>bool</code> <p>Optional flag to disable printing to custom_print_fn. Used when we want to display text (such as white space lines) in Terminal but not in a logger or other custom_print_fn.</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/display/#pandas_checks.display._print_table","title":"<code>_print_table(table, title, custom_print_fn_only=False)</code>","text":"<p>Prints a Pandas table in a terminal with an optional indent.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Union[DataFrame, Series]</code> <p>A DataFrame or Series.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/display/#pandas_checks.display._render_html_with_indent","title":"<code>_render_html_with_indent(object_as_html)</code>","text":"<p>Renders HTML with an optional indent.</p> <p>Parameters:</p> Name Type Description Default <code>object_as_html</code> <code>str</code> <p>The HTML to render.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/display/#pandas_checks.display._render_text","title":"<code>_render_text(text, tag, lead_in=None, colors={}, bypass_print_fn=False)</code>","text":"<p>Renders text with optional formatting.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to render.</p> required <code>tag</code> <code>str</code> <p>The HTML tag to use for rendering.</p> required <code>lead_in</code> <code>Union[str, None]</code> <p>Optional text to display before the main text.</p> <code>None</code> <code>colors</code> <code>Dict</code> <p>Optional colors for the text and lead-in text. Keys include:     - text_color: The foreground color of the main text.     - text_background_color: The background or highlight color of the main text.     - lead_in_text_color: The foreground color of lead-in text.     - lead_in_background_color: The background color of lead-in text. Color values are phrased such as \"blue\" or \"white\". They are passed to either HTML     for Jupyter/IPython outputs and to <code>termcolor</code> when code is run in terminal.     For color options when code is run in terminal, see         https://github.com/termcolor/termcolor.</p> <code>{}</code> <code>bypass_print_fn</code> <code>bool</code> <p>Optional flag to decide whether the text should also be sent to the global custom print function, if it exists. See _display_router() for details.</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/display/#pandas_checks.display._warning","title":"<code>_warning(message, lead_in='\ud83d\udc3c\ud83e\ude7a Pandas Checks warning', clean_type=False)</code>","text":"<p>Displays a warning message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The warning message to display.</p> required <code>lead_in</code> <code>str</code> <p>Optional lead-in text to display before the warning message.</p> <code>'\ud83d\udc3c\ud83e\ude7a Pandas Checks warning'</code> <code>clean_type</code> <code>bool</code> <p>Optional flag to remove the class type from the message, when running .check.dtype().</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/options/","title":"Options","text":"<p>Utilities for configuring Pandas Checks options.</p> <p>This module provides functions for setting and managing global options for Pandas Checks, including formatting and disabling checks and assertions.</p>"},{"location":"API%20reference/options/#pandas_checks.options._initialize_format_options","title":"<code>_initialize_format_options(options=None)</code>","text":"<p>Initializes or resets Pandas Checks formatting options.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>Union[List[str], None]</code> <p>A list of option names to initialize or reset. If None, all formatting options will be initialized or reset.</p> <code>None</code> <p>Returns:     None</p> Note <p>We separate this function from _initialize_options() so user can reset just formatting without changing mode</p>"},{"location":"API%20reference/options/#pandas_checks.options._initialize_options","title":"<code>_initialize_options()</code>","text":"<p>Initializes (or resets) all Pandas Checks options to their default values.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Note <p>We separate this function from _initialize_format_options() so user can reset just formatting if desired without changing mode</p>"},{"location":"API%20reference/options/#pandas_checks.options._is_callable","title":"<code>_is_callable(object)</code>","text":"<p>Validator function to check if an object is callable.</p> <p>Parameters:</p> Name Type Description Default <code>object</code> <code>Any</code> <p>The Python object to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if object is callable or None, False otherwise.</p>"},{"location":"API%20reference/options/#pandas_checks.options._register_option","title":"<code>_register_option(name, default_value, description, validator)</code>","text":"<p>Registers a Pandas Checks option in the global Pandas context manager.</p> <p>If the option has already been registered, reset its value.</p> <p>This method enables setting global formatting for Pandas Checks results and storing variables that will persist across Pandas method chains, which return newly initialized DataFrames at each method (and so reset the DataFrame's attributes).</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the option to register.</p> required <code>default_value</code> <code>Any</code> <p>The default value for the option.</p> required <code>description</code> <code>str</code> <p>A description of the option.</p> required <code>validator</code> <code>Callable</code> <p>A function to validate the option value.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Note <p>For more details on the arguments, see the documentation for pandas._config.config.register_option()</p>"},{"location":"API%20reference/options/#pandas_checks.options._set_option","title":"<code>_set_option(option, value)</code>","text":"<p>Updates the value of a Pandas Checks option in the global Pandas context manager.</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <code>str</code> <p>The name of the option to set.</p> required <code>value</code> <code>Any</code> <p>The value to set for the option.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>AttributeError</code> <p>If the <code>option</code> is not a valid Pandas Checks option.</p>"},{"location":"API%20reference/options/#pandas_checks.options.describe_options","title":"<code>describe_options()</code>","text":"<p>Prints all global options for Pandas Checks, their default values, and current values.</p> <p>NOTE: Does not use custom_print_fn. Always prints to stdout.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/options/#pandas_checks.options.disable_checks","title":"<code>disable_checks(enable_asserts=True)</code>","text":"<p>Turns off all calls to Pandas Checks methods and optionally enables or disables check.assert_data(). Does not modify the DataFrame itself.</p> <p>If this function is called, subequent calls to .check functions will not be run.</p> <p>Typically used to     1) Globally switch off Pandas Checks, such as during production. or     2) Temporarily switch off Pandas Checks, such as for a stable part of a notebook.</p> <p>Parameters:</p> Name Type Description Default <code>enable_asserts</code> <code>bool</code> <p>Whether to also run calls to Pandas Checks .check.assert_data()</p> <code>True</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/options/#pandas_checks.options.enable_checks","title":"<code>enable_checks(enable_asserts=True)</code>","text":"<p>Turns on Pandas Checks globally. Subsequent calls to .check methods will be run.</p> <p>Parameters:</p> Name Type Description Default <code>enable_asserts</code> <code>bool</code> <p>Whether to also enable or disable check.assert_data().</p> <code>True</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/options/#pandas_checks.options.get_mode","title":"<code>get_mode()</code>","text":"<p>Returns whether Pandas Checks is currently running checks and assertions.</p> <p>Returns:</p> Type Description <code>Dict[str, bool]</code> <p>A dictionary containing the current settings.</p>"},{"location":"API%20reference/options/#pandas_checks.options.reset_format","title":"<code>reset_format()</code>","text":"<p>Globally restores all Pandas Checks formatting options to their default \"factory\" settings.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/options/#pandas_checks.options.set_custom_print_fn","title":"<code>set_custom_print_fn(custom_print_fn, print_to_stdout=None)</code>","text":"<p>Specifies, or resets, a custom print function for Pandas Checks results. Optionally also (re)sets whether check results should be shown on screen.</p> <p>Feature idea from @alexblakes, inspired by scikit-lego's sklego.pandas_utils.log_step. https://github.com/cparmet/pandas-checks/issues/48</p> <p>Example usage:</p> <pre><code>    # To display check results on screen and in the log at LEVEL=INFO:\n    import pandas_checks as pdc\n\n    pdc.set_custom_print_fn(logging.info)\n\n    # To _only_ send check results to the log, not display them on screen:\n    pdc.set_custom_print_fn(custom_print_fn=logging.info, print_to_stdout=False)\n\n    # To reset these settings to their defaults:\n    pdc.set_custom_print_fn(custom_print_fn=None, print_to_stdout=True)\n</code></pre> <p>NOTE: Only plain text is sent to custom_print_fn. Plots, HTML, and colored text will not be sent. set_option(precision) also does not apply to custom_print_fn.</p> <p>Parameters:</p> Name Type Description Default <code>custom_print_fn</code> <code>Union[Callable, None]</code> <p>A callable function that takes a single argument (the text to print). If None, or not passed, disables custom print.</p> required <code>print_to_stdout</code> <code>Union[bool, None]</code> <p>Whether to also display check results on screen. If None, does not change the current setting for print_to_stdout (in case the caller only wants to configure custom_print_fn).</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/options/#pandas_checks.options.set_format","title":"<code>set_format(**kwargs)</code>","text":"<p>Configures selected formatting options for Pandas Checks. Run pandas_checks.describe_options() to see a list of available options.</p> <p>For example, set_format(check_text_tag= \"h1\", use_emojis=False`) will globally change Pandas Checks to display text results as H1 headings and remove all emojis.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Pairs of setting name and its new value.</p> <code>{}</code>"},{"location":"API%20reference/options/#pandas_checks.options.set_mode","title":"<code>set_mode(enable_checks, enable_asserts)</code>","text":"<p>Configures the operation mode for Pandas Checks globally.</p> <p>Parameters:</p> Name Type Description Default <code>enable_checks</code> <code>bool</code> <p>Whether to run any Pandas Checks methods globally. Does not affect .check.assert_data().</p> required <code>enable_asserts</code> <code>bool</code> <p>Whether to run calls to .check.assert_data() globally.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/run_checks/","title":"Run checks","text":"<p>Utilities for running Pandas Checks data checks.</p>"},{"location":"API%20reference/run_checks/#pandas_checks.run_checks._apply_modifications","title":"<code>_apply_modifications(data, fn=lambda df: df, subset=None)</code>","text":"<p>Applies user's modifications to a data object.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>May be any Pandas DataFrame, Series, string, or other variable</p> required <code>fn</code> <code>Callable</code> <p>An optional lambda function to modify <code>data</code></p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>Columns to subset after applying modifications</p> <code>None</code> <p>Returns:</p> Type Description <code>Any</code> <p>Modified and optionally subsetted data object.  If all arguments are defaults, data is returned unchanged.</p>"},{"location":"API%20reference/run_checks/#pandas_checks.run_checks._check_data","title":"<code>_check_data(data, check_fn=lambda df: df, modify_fn=lambda df: df, subset=None, check_name=None)</code>","text":"<p>Runs a selected check on a data object</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>A Pandas DataFrame, Series, string, or other variable</p> required <code>check_fn</code> <code>Callable</code> <p>Function to apply to data for checking. For example if we're running .check.value_counts(), this function would appply the Pandas value_counts() method</p> <code>lambda df: df</code> <code>modify_fn</code> <code>Callable</code> <p>Optional function to modify data before checking</p> <code>lambda df: df</code> <code>subset</code> <code>Union[str, List, None]</code> <p>Optional list of columns or name of column to subset data before running check_fn</p> <code>None</code> <code>check_name</code> <code>Union[str, None]</code> <p>Name to use when displaying check result</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/run_checks/#pandas_checks.run_checks._display_check","title":"<code>_display_check(data, name=None)</code>","text":"<p>Renders the result of a Pandas Checks method.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>The data to display, whether a DataFrame, Series, string, or other printable.</p> required <code>name</code> <code>Union[str, None]</code> <p>The optional name of the check.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/run_checks/#pandas_checks.run_checks.get_mode","title":"<code>get_mode()</code>","text":"<p>Returns whether Pandas Checks is currently running checks and assertions.</p> <p>Returns:</p> Type Description <code>Dict[str, bool]</code> <p>A dictionary containing the current settings.</p>"},{"location":"API%20reference/timer/","title":"Timer","text":"<p>Provides a timer utility for tracking the elapsed time of steps within a Pandas method chain.</p> <p>Note that these functions rely on the <code>pdchecks.enable_checks</code> option being enabled in the Pandas configuration, as it is by default.</p>"},{"location":"API%20reference/timer/#pandas_checks.timer._display_line","title":"<code>_display_line(line, lead_in=None, colors={})</code>","text":"<p>Displays a line of text with optional formatting.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>str</code> <p>The text to display.</p> required <code>lead_in</code> <code>Union[str, None]</code> <p>The optional text to display before the main text.</p> <code>None</code> <code>colors</code> <code>Dict</code> <p>An optional dictionary containing color options for the text and lead-in text. See syntax in docstring for _render_text().</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/timer/#pandas_checks.timer.get_mode","title":"<code>get_mode()</code>","text":"<p>Returns whether Pandas Checks is currently running checks and assertions.</p> <p>Returns:</p> Type Description <code>Dict[str, bool]</code> <p>A dictionary containing the current settings.</p>"},{"location":"API%20reference/timer/#pandas_checks.timer.print_time_elapsed","title":"<code>print_time_elapsed(start_time, lead_in='\u23f1\ufe0f Time elapsed', units='auto')</code>","text":"<p>Displays the time elapsed since start_time.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>float</code> <p>The index time when the stopwatch started, which comes from the Pandas Checks start_timer()</p> required <code>lead_in</code> <code>Union[str, None]</code> <p>Optional text to print before the elapsed time.</p> <code>'\u23f1\ufe0f Time elapsed'</code> <code>units</code> <code>str</code> <p>The units in which to display the elapsed time. Allowed values: \"auto\", \"milliseconds\", \"seconds\", \"minutes\", \"hours\" or shorthands \"ms\", \"s\", \"m\", \"h\"</p> <code>'auto'</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>units</code> is not one of allowed values.</p> Note <p>If you change the default values for this function's argument, change them in <code>.check.print_time_elapsed</code> too in DataFrameChecks and SeriesChecks so they're exposed to the user.</p>"},{"location":"API%20reference/timer/#pandas_checks.timer.start_timer","title":"<code>start_timer(verbose=False)</code>","text":"<p>Starts a Pandas Checks stopwatch to measure run time between operations, such as steps in a Pandas method chain. Use print_elapsed_time() to get timings.</p> <p>Parameters:</p> Name Type Description Default <code>verbose</code> <code>bool</code> <p>Whether to print a message that the timer has started.</p> <code>False</code> <p>Returns:</p> Type Description <code>float</code> <p>Timestamp as a float</p>"},{"location":"API%20reference/utils/","title":"Utils","text":"<p>Utility functions for the pandas_checks package.</p>"},{"location":"API%20reference/utils/#pandas_checks.utils._display_line","title":"<code>_display_line(line, lead_in=None, colors={})</code>","text":"<p>Displays a line of text with optional formatting.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>str</code> <p>The text to display.</p> required <code>lead_in</code> <code>Union[str, None]</code> <p>The optional text to display before the main text.</p> <code>None</code> <code>colors</code> <code>Dict</code> <p>An optional dictionary containing color options for the text and lead-in text. See syntax in docstring for _render_text().</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API%20reference/utils/#pandas_checks.utils._has_nulls","title":"<code>_has_nulls(data, fail_message, raise_exception=True, exception_to_raise=DataError)</code>","text":"<p>Utility function to check for nulls as part of a larger check</p>"},{"location":"API%20reference/utils/#pandas_checks.utils._is_type","title":"<code>_is_type(data, dtype)</code>","text":"<p>Utility function to check if a dataframe's columns or one series has an expected type. Includes special handling for strings, since 'object' type in Pandas may not mean a string</p>"},{"location":"API%20reference/utils/#pandas_checks.utils._lambda_to_string","title":"<code>_lambda_to_string(lambda_func)</code>","text":"<p>Create a string representation of a lambda function.</p> <p>Parameters:</p> Name Type Description Default <code>lambda_func</code> <code>Callable</code> <p>An arbitrary function in lambda form</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string version of lambda_func</p> Todo <p>This still returns all arguments to the calling function.     They get entangled with the argument when it's a lambda function.     Try other ways to get just the argument we want.</p>"},{"location":"API%20reference/utils/#pandas_checks.utils._series_is_type","title":"<code>_series_is_type(s, dtype)</code>","text":"<p>Utility function to check if a series has an expected type. Includes special handling for strings, since 'object' type in Pandas may not mean a string</p>"}]}